DATA MINING & DATA SCIENCE (Slip Solutions)

--------------------------------------------------------------------------------------------

//SLIP1-->
Q1.Write a R program to add, multiply and divide two vectors of integer type. (Vector 
length should be minimum 4) [10 Marks] 

> A<- c (1,5,12,7)
> B<- c (3,11,10,4)
> print ("Original Vectors")
[1] "Original Vectors"
> print (A)
[1]  1  5 12  7
> print (B)
[1]  3 11 10  4
> print ("Addition of 2 Vectors- ", add)
[1] "Addition of 2 Vectors- "
> add = A+B
> print (add)
[1]  4 16 22 11
> print ("Subtraction of 2 Vectors- ")
[1] "Subtraction of 2 Vectors- "
> sub = A-B
> print (sub)
[1] -2 -6  2  3
> print ("Multiplication of 2 Vectors- ")
[1] "Multiplication of 2 Vectors- "
> mult = A*B
> print (mult)
[1]   3  55 120  28
> print ("Division of 2 Vectors- ")
[1] "Division of 2 Vectors- "
> div = A/B
> print (div)
[1] 0.3333333 0.4545455 1.2000000 1.7500000
 
Q2.Consider the student data set. It can be downloaded from: 
https://drive.google.com/open?id=1oakZCv7g3mlmCSdv9J8kdSaqO 5_6dIOw . 
Write a programme in python to apply simple linear regression and find out mean 
absolute error, mean squared error and root mean squared error. [20 Marks] 

import numpy as np
import math
from sklearn.metrics import mean_squared_error , mean_absolute_error
actual = [2, 3, 3, 5, 9]
calculated = [5, 5, 1, 7, 2]

MAE = mean_absolute_error (actual, calculated)
print ("Mean Absolute Error: "+ str (MAE))

MSE = np.square (np.subtract(actual, calculated)).mean()
print ("Mean Squared Error: "+ str (MSE))

MSE = np.square (np.subtract(actual, calculated)).mean()
RMSE = math.sqrt(MSE)
print ("Root Mean Square Error: "+str (RMSE)) 

--------------------------------------------------------------------------------------------

//SLIP2-->
Q1. Write an R program to calculate the multiplication table using a function.
 [10 Marks] 

> n <- as.integer (readline (prompt= "Enter number: "))
Enter number: 4
> multTable = function (n)
+ {
+ for (i in 1:10)
+ {
+ print (paste (n, 'x', i, '=', n*i))
+ }
+ }
> multTable (5)
[1] "5 x 1 = 5"
[1] "5 x 2 = 10"
[1] "5 x 3 = 15"
[1] "5 x 4 = 20"
[1] "5 x 5 = 25"
[1] "5 x 6 = 30"
[1] "5 x 7 = 35"
[1] "5 x 8 = 40"
[1] "5 x 9 = 45"
[1] "5 x 10 = 50"


Q2. Write a python program to implement k-means algorithms on a synthetic 
dataset. [20 Marks] 

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs

data = make_blobs (n_samples=300, n_features=2, centers=5, cluster_std=1.8, random_state=101)
data[0].shape
data[1]

from sklearn.cluster import KMeans
kmeans = KMeans (n_clusters=5)
kmeans.fit(data[0])
kmeans.label_f, (ax1, ax2) = plt.subplots (1,2, sharey=True, figsize=(10,6))
ax1.set_title ('Original')
ax1.scatter (data[0][:,0], data[0][:,1], c=data[1], cmap='brg')
ax2.set_title ('K=Means')
ax2.scatter (data[0][:,0], data[0][:,1], c=kmeans.labels_, cmap='brg')
plt.show()

--------------------------------------------------------------------------------------------

//SLIP3-->
Q1. Write a R program to reverse a number and also calculate the sum of digits of that 
number. [10 Marks] 

> n = as.integer (readline (prompt = "Enter the Number: "))
Enter the Number: 
RevSum = function (n)
{
rev=0
sum=0
while ( n > 0 )
{
rem = n%%10
rev = rev*10+rem
sum = sum+rem
n = n%/%10
}
print (paste ("Reverse number: " ,rev))
print (paste ("Sum of number: " ,sum))
}
> RevSum (1234)
[1] "Reverse number:  4321"
[1] "Sum of number:  10"

 
Q2. Consider the following observations/data. And apply simple linear regression and find 
out estimated coefficients b0 and b1.( use numpy package) 
x=[0,1,2,3,4,5,6,7,8,9,11,13] 
y = ([1, 3, 2, 5, 7, 8, 8, 9, 10, 12,16, 18] [20 Marks] 

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
x=np.array([0,1,2,3,4,5,6,7,8,9,11,13])
y=np.array([1,3,2,5,7,8,8,9,10,12,16,18])
slop, intercept, r, p, std_error = stats.linregress(x,y)
def func(x):
  return slop * x + intercept

model = list(map(func,x))
plt.scatter(x,y)
plt.plot(x,model)
plt.show()

--------------------------------------------------------------------------------------------

//SLIP4-->
 
Q1. Write a R program to calculate the sum of two matrices of given size.         [10 Marks] 

> m1 = matrix(c(1,2,3,4,5,6),nrow=2)
> print (m1)
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> m2 = matrix(c(7,8,9,10,11,12),nrow=2)
> print (m2)
     [,1] [,2] [,3]
[1,]    7    9   11
[2,]    8   10   12
> matrixAdd = (m1+m2)
> cat ("SUM of Matrixs: ", "\n")
SUM of Matrixs:  
> print (matrixAdd)
     [,1] [,2] [,3]
[1,]    8   12   16
[2,]   10   14   18

Q2. Consider following dataset 
weather=['Sunny','Sunny','Overcast','Rainy','Rainy','Rainy','Overcast','Sunny','Sunny','Rainy','Sunn
 y','Overcast','Overcast','Rainy'] 
temp=['Hot','Hot','Hot','Mild','Cool','Cool','Cool','Mild','Cool','Mild','Mild','Mild','Hot','Mild'] 
play=['No','No','Yes','Yes','Yes','No','Yes','No','Yes','Yes','Yes','Yes','Yes','No']. 
Use NaÃ¯ve Bayes algorithm to predict [0: Overcast, 2: Mild] tuple belongs to which class 
whether to play the sports or not. 
        [20 Marks]
		
************ANSWER************
weather=['Sunny','Sunny','Overcast','Rainy','Rainy','Rainy','Overcast','Sunny','Sunny','Rainy','Sunny','Overcast','Overcast','Rainy']
temp=['Hot','Hot','Hot','Mild','Cool','Cool','Cool','Mild','Cool','Mild','Mild','Mild','Hot','Mild']
play=['No','No','Yes','Yes','Yes','No','Yes','No','Yes','Yes','Yes','Yes','Yes','No']

from sklearn import preprocessing
le = preprocessing.LabelEncoder()

w=le.fit_transform(weather)
print ("Weather: ",w)

temp=le.fit_transform(temp)
play=le.fit_transform(play)

print ("\nTemperature: ",temp)
print ("\nPlay: ",play)

features=list(zip(w,temp))
print ("\nWeather,Temp: ",features)

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(features,play)
predicted= model.predict([[0,2]])

print ("\nPredicted Value:", predicted)
--------------------------------------------------------------------------------------------

//SLIP5-->
 
Q1. Write a R program to concatenate two given factors. [10 Marks] 

> f1 = factor (sample(LETTERS, size=5, replace=TRUE))
> f2 = factor (sample(LETTERS, size=5, replace=TRUE))
> print ("Original Factors")
[1] "Original Factors"
> print (f1)
[1] X A C Q I
Levels: A C I Q X
> print (f2)
[1] Q K M P V
Levels: K M P Q V
> f = factor(c(levels(f1)[f1], levels(f2)[f2]))
> print ("After concatenate Factors")
[1] "After concatenate Factors"
> print (f)
 [1] X A C Q I Q K M P V
Levels: A C I K M P Q V X
 
Q2. Write a Python program build Decision Tree Classifier using Scikit- learn package for 
diabetes data set (download database from https://www.kaggle.com/uciml/pima
indians-diabetes-database) 
[20 Marks]
--------------------------------------------------------------------------------------------

//SLIP6-->
Q1. Write a R program to create a data frame using two given vectors and display the duplicate 
elements. [10 Marks] 

> shares = c ("Tata", "Ranka", "Indian Oil", "Infosys", "Ranka")
> price = c (100, 50, 200, 500, 50)
> company = data.frame (shares, price)
> print (company)
      shares price
1       Tata   100
2      Ranka    50
3 Indian Oil   200
4    Infosys   500
5      Ranka    50
> print ("Duplicate elements: ")
[1] "Duplicate elements: "
> company[duplicated(company),]
  shares price
5  Ranka    50

******OR******

> rollno = c (1,2,3,1,5)
> name = c ("Kajal", "Lalit", "Manish", "Kajal", "Rahul")
> print (rollno)
[1] 1 2 3 1 5
> print (name)
[1] "Kajal"  "Lalit"  "Manish" "Kajal"  "Rahul" 
> student = data.frame (rollno, name)
> print (student)
  rollno   name
1      1  Kajal
2      2  Lalit
3      3 Manish
4      1  Kajal
5      5  Rahul
> print ("Duplicate Elements: ")
[1] "Duplicate Elements: "
> student[duplicated(student),]
  rollno  name
4      1 Kajal

 
Q2. Write a python program to implement hierarchical Agglomerative clustering algorithm. 
(Download Customer.csv dataset from github.com). 
[20 Marks]

import pandas as pd
import matplotlib.pyplot as mtp
df = pd.read_csv ('MallCustomers.csv')
x = df.iloc [:, [3,4]].values

import scipy.cluster.hierarchy as shc
dendro = shc.dendrogram (shc.linkage (x,method='ward'))
mtp.title ("Dendrogram")
mtp.xlabel ("Customer")
mtp.ylabel ("Euclidean distance")
mtp.show()

from sklearn.cluster import AgglomerativeClustering
hc = AgglomerativeClustering (n_clusters=5, affinity='euclidean', linkage='ward')
y_pred = hc.fit_predict(x)
mtp.scatter (x[y_pred == 0,0], x[y_pred == 0,1], s=100, c="red", label="Cluster1")
mtp.scatter (x[y_pred == 1,0], x[y_pred == 1,1], s=100, c="blue", label="Cluster2")
mtp.scatter (x[y_pred == 2,0], x[y_pred == 2,1], s=100, c="yellow", label="Cluster3")
mtp.scatter (x[y_pred == 3,0], x[y_pred == 3,1], s=100, c="pink", label="Cluster4")
mtp.scatter (x[y_pred == 4,0], x[y_pred == 4,1], s=100, c="cyan", label="Cluster5")
mtp.title ("Customer Cluster")
mtp.xlabel ("Annual Income k($)")
mtp.ylabel ("Spending score (1-100)")
mtp.legend()
mtp.show()

--------------------------------------------------------------------------------------------

//SLIP7-->
Q1. Write a R program to create a sequence of numbers from 20 to 50 and find the mean of 
numbers from 20 to 60 and sum of numbers from 51 to 91. 
[10 Marks] 

> print ("Sequence of Numbers from 20 to 50")
[1] "Sequence of Numbers from 20 to 50"
> print (seq(20,50))
 [1] 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
[26] 45 46 47 48 49 50
> print ("Mean of Numbers from 20 to 60")
[1] "Mean of Numbers from 20 to 60"
> print (mean( 20:60))
[1] 40
> print ("Sum of Numbers from 51 to 91")
[1] "Sum of Numbers from 51 to 91"
> print (sum( 51:91))
[1] 2911

Q2. Consider the following observations/data. And apply simple linear regression and find out 
estimated coefficients b1 and b1 Also analyse the performance of the model 
(Use sklearn package) 
x = np.array([1,2,3,4,5,6,7,8]) 
y = np.array([7,14,15,18,19,21,26,23]) [20 Marks]

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

x = np.array([1,2,3,4,5,6,7,8])
y = np.array ([7,14,15,18,19,21,26,23])

slop, intercept, r, p, std_error = stats.linregress (x,y)
def func(x):
  slop * x + intercept

model = list(map(func,x))
plt.scatter(x,y)
plt.plot (x, model)
plt.show()

--------------------------------------------------------------------------------------------

//SLIP8-->
 
Q1. Write a R program to get the first 10 Fibonacci numbers. [10 Marks] 
 
> Fibo = numeric(10)
> Fibo[1] = Fibo[2] = 1
> for (i in 3:10)
+ Fibo[i] = Fibo[i-2] + Fibo[i-1]
> print ("First 10 Fibonacci Number")
[1] "First 10 Fibonacci Number"
> print (Fibo)
 [1]  1  1  2  3  5  8 13 21 34 55

Q2. Write a python program to implement k-means algorithm to build prediction model (Use 
Credit Card Dataset CC GENERAL.csv Download from kaggle.com) [20 Marks] 

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs

data = make_blobs (n_samples=300, n_features=2, centers=5, cluster_std=1.8, random_state=101)
data[0].shape
data[1]

from sklearn.cluster import KMeans
kmeans = KMeans (n_clusters=5)
kmeans.fit(data[0])
kmeans.label_f, (ax1, ax2) = plt.subplots (1,2, sharey=True, figsize=(10,6))
ax1.set_title ('Original')
ax1.scatter (data[0][:,0], data[0][:,1], c=data[1], cmap='brg')
ax2.set_title ('K=Means')
ax2.scatter (data[0][:,0], data[0][:,1], c=kmeans.labels_, cmap='brg')
plt.show()
--------------------------------------------------------------------------------------------

//SLIP9-->
Q1. Write an R program to create a Data frames which contain details of 5 employees and display 
summary of the data. [10 Marks] 

> Employees = data.frame (Name = c ("Kajal", "Manish", "Vivek", "Sayali", "Gargi"),
+ Age = c (23, 42, 21, 31, 28), 
+ Gender = c ("Female", "Male", "Male", "Female", "Female"),
+ Designation = c ("Team Leader","Manager","Clerk","CEO","Clerk"))
> print(Employees)
    Name Age Gender Designation
1  Kajal  23 Female Team Leader
2 Manish  42   Male     Manager
3  Vivek  21   Male       Clerk
4 Sayali  31 Female         CEO
5  Gargi  28 Female       Clerk


Q2. Write a Python program to build an SVM model to Cancer dataset. The dataset is 
available in the scikit-learn library. Check the accuracy of model with precision and 
recall. [20 Marks] 
--------------------------------------------------------------------------------------------

//SLIP10-->
Q1. Write a R program to find the maximum and the minimum value of a given vector [10 
Marks] 
 > nums = c (10,45,9,37,80)
> print ("Original Vector")
[1] "Original Vector"
> print (nums)
[1] 10 45  9 37 80
> print (paste("Maximum Number", max(nums)))
[1] "Maximum Number 80"
> print (paste("Minimum Number", min(nums)))
[1] "Minimum Number 9"

 
Q2. Write a Python Programme to read the dataset (âIris.csvâ). dataset download from 
(https://archive.ics.uci.edu/ml/datasets/iris) and apply Apriori algorithm. [20 Marks]
--------------------------------------------------------------------------------------------

//SLIP11-->
Q1. Write a R program to find all elements of a given list that are not in another given list. 
 
= list("x", "y", "z") 
= list("X", "Y", "Z", "x", "y", "z") [10 Marks]

ANSWER****** 

> l1 = list ("a", "b", "c")
> print ("Original List") 
[1] "Original List"
> print (l1)
[[1]]
[1] "a"

[[2]]
[1] "b"

[[3]]
[1] "c"
> l2 = list ("a", "b", "c", "A", "B", "C")
> print ("Original List") 
[1] "Original List"
> print (l2)
[[1]]
[1] "a"

[[2]]
[1] "b"

[[3]]
[1] "c"

[[4]]
[1] "A"

[[5]]
[1] "B"

[[6]]
[1] "C"
> print ("All the Elements of l2 that are not in l1:")
[1] "All the Elements of l2 that are not in l1:"
> setdiff (l2,l1)
[[1]]
[1] "A"

[[2]]
[1] "B"

[[3]]
[1] "C"

 
 
Q2. Write a python program to implement hierarchical clustering algorithm. (Download 
Wholesale customers data dataset from github.com). 
[20 Marks] 
--------------------------------------------------------------------------------------------

//SLIP12-->
Q1. Write a R program to create a Dataframes which contain details of 5 employees and 
display the details. 
Employee contain (empno,empname,gender,age,designation) 
[10 Marks] 


> Employees = data.frame (EmpName = c ("Kajal", "Manish", "Vivek", "Sayali", "Gargi"),
+ Empno = c (1,2,3,4,5),
+ Gender = c ("Female", "Male", "Male", "Female", "Female"),
+ Age = c (23, 42, 21, 31, 28), 
+ Designation = c ("Team Leader","Manager","Clerk","CEO","Clerk"))
> print (Employees)
  EmpName Empno Gender Age Designation
1   Kajal     1 Female  23 Team Leader
2  Manish     2   Male  42     Manager
3   Vivek     3   Male  21       Clerk
4  Sayali     4 Female  31         CEO
5   Gargi     5 Female  28       Clerk


Q2. Write a python program to implement multiple Linear Regression model for a car dataset. 
Dataset can be downloaded from: 
https://www.w3schools.com/python/python_ml_multiple_regression.asp 
[20 Marks]

import pandas as pd
from sklearn import linear_model

df = pd.read_csv ('Cars.csv')
x = df[['Weight', 'Volume']]
y = df['CO2']
regr = linear_model.LinearRegression()
regr.fit(x.values,y)
predictedCO2 = regr.predict([[2300,1300]])
print (predictedCO2)

OUTPUT*****
We have already predicted that if a car with a 1300cm3 engine weighs 2300kg, the CO2 emission will be approximately 107g.

--------------------------------------------------------------------------------------------

//SLIP13-->
Q1. Draw a pie chart using R programming for the following data distribution: 
 Digits on 
Dice 
1 2 3 4 5 6 
Frequency of 
getting each 
number 
7 2 6 3 4 8 
[10 Marks] 
 

*************ANSWER***********
> Dice = c (1,2,3,4,5,6)
> Frequency = c (7,2,6,3,4,8)
> pie (Dice, Frequency)

 
Q2. Write a Python program to read âStudentsPerformance.csvâ file. Solve following: - To display the shape of dataset. - To display the top rows of the dataset with their columns. Note: Download 
dataset from following link : 
(https://www.kaggle.com/spscientist/students-performance-inexams? 
select=StudentsPerformance.csv) [20 Marks]

ANSWER*****
import pandas as pd
data = pd.read_csv("StudentsPerformance.csv")

# using dataframe.shape
shape = data.shape

# printing shape
print("Display the shape of dataset = {}".format(shape))

# calling head() method 
# storing in new variable 
top = data.head() 

print ("\nDisplay the top rows of the dataset with their columns")
# display 
top 

--------------------------------------------------------------------------------------------

//SLIP14-->
Q1. Write a script in R to create a list of employees (name) and perform the following: 
a. Display names of employees in the list. 
b. Add an employee at the end of the list 
c. Remove the third element of the list. [10 Marks] 

************ANSWER***********
> List_emp = list("Anikta","Sejal","Palak","Nikhil","Tejas")
> print ("1-Display names of employees")
[1] "1-Display names of employees"

 > print (List_emp)
[[1]]
[1] "Anikta"

[[2]]
[1] "Sejal"

[[3]]
[1] "Palak"

[[4]]
[1] "Nikhil"

[[5]]
[1] "Tejas"

> print ("2-Add an employee at the end")
[1] "2-Add an employee at the end"
> newEmp = "Usha"
> List_emp = append(List_emp,newEmp)
> print (List_emp)
[[1]]
[1] "Anikta"

[[2]]
[1] "Sejal"

[[3]]
[1] "Palak"

[[4]]
[1] "Nikhil"

[[5]]
[1] "Tejas"

[[6]]
[1] "Usha"

> print ("3-Remove the third element")
[1] "3-Remove the third element"
> List_emp[3] = NULL
> print (List_emp)
[[1]]
[1] "Anikta"

[[2]]
[1] "Sejal"

[[3]]
[1] "Nikhil"

[[4]]
[1] "Tejas"

[[5]]
[1] "Usha"


Q2. Write a Python Programme to apply Apriori algorithm on Groceries dataset. Dataset 
can be downloaded from 
(https://github.com/amankharwal/Websitedata/blob/master/Groceries 
_dataset.csv). 
Also display support and confidence for each rule. 
[20 Marks] 
--------------------------------------------------------------------------------------------

//SLIP15-->
 
Q1.Write a R program to add, multiply and divide two vectors of integer type. (vector length 
should be minimum 4) [10 Marks] 

> A<- c (1,5,12,7)
> B<- c (3,11,10,4)
> print ("Original Vectors")
[1] "Original Vectors"
> print (A)
[1]  1  5 12  7
> print (B)
[1]  3 11 10  4
> print ("Addition of 2 Vectors- ", add)
[1] "Addition of 2 Vectors- "
> add = A+B
> print (add)
[1]  4 16 22 11
> print ("Subtraction of 2 Vectors- ")
[1] "Subtraction of 2 Vectors- "
> sub = A-B
> print (sub)
[1] -2 -6  2  3
> print ("Multiplication of 2 Vectors- ")
[1] "Multiplication of 2 Vectors- "
> mult = A*B
> print (mult)
[1]   3  55 120  28
> print ("Division of 2 Vectors- ")
[1] "Division of 2 Vectors- "
> div = A/B
> print (div)
[1] 0.3333333 0.4545455 1.2000000 1.7500000
 
Q2. Write a Python program build Decision Tree Classifier for shows.csv from pandas and 
predict class label for show starring a 40 years old American comedian, with 10 
years of experience, and a comedy ranking of 7? Create a csv file as shown in 
https://www.w3schools.com/python/python_ml_decision_tree.asp 
[20 Marks] 
--------------------------------------------------------------------------------------------

//SLIP16-->

Q1. Write a R program to create a simple bar plot of given data 
 
Year Export Import 
2001 26 35 
2002 32 40 
2003 35 50 
[10 Marks] 
 

> colors = c ("brown", "Orange")
year = c (2001, 2002, 2003)
ei = c ("Import", "Export")
Values = matrix (c (26,32,35,35,40,50), nrow=2, ncol=3, byrow=TRUE)
barplot (Values, main = "Import/Export", names.arg = year, xlab = "year", ylab="import/export", col=colors)

Q2. Write a Python program build Decision Tree Classifier using Scikit-learn package for 
diabetes data set (download database from https://www.kaggle.com/uciml/pima-indians
diabetes-database) 
[20 Marks]
--------------------------------------------------------------------------------------------

//SLIP17-->

Q1. Write a R program to get the first 20 Fibonacci numbers. 
[10 Marks] 

> fibo = numeric (20)
> fibo[1] = fibo[2] = 1
> for (i in 3:20)
+ fibo[i] = fibo[i-2] + fibo[i-1]
> print ("First 20 Fibonacci Numbers")
[1] "First 20 Fibonacci Numbers"
> print (fibo)
 [1]    1    1    2    3    5    8   13   21   34   55   89  144  233  377  610
[16]  987 1597 2584 4181 6765

Q2. Write a python programme to implement multiple linear regression model for stock market 
data frame as follows: 
Stock_Market = {'Year': 
[2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2016,2 
016,20,16,2016,2016,2016,2016,2016,2016,2016,2016,2016], 
'Month': [12, 11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1], 
'Interest_Rate': [2.75,2.5,2.5,2.5,2.5,2.5,2.5,2.25,2.25,2.25,2,2,2,1.75,1.75,1.75,1.75,1.75,1 
.75,1.75,1.75,1.75,1.75,1.75], 
'Unemployment_Rate': 
[5.3,5.3,5.3,5.3,5.4,5.6,5.5,5.5,5.5,5.6,5.7,5.9,6,5.9,5.8,6.1,6.2,6.1,6.1,6.1,5 
.9,6.2,6.2,6.1], 
'Stock_Index_Price': [1464,1394,1357,1293,1256,1254,1234,1195,1159,1167,1130,1075,1047, 
965,943,958,971,949,884,866,876,822,704,719] } 
And draw a graph of stock market price verses interest rate. 
[20 Marks]

************ANSWER***********
import pandas as pd
import matplotlib.pyplot as plt

Stock_Market = {'Year': 
[2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016], 
 'Month': [12, 11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1], 
 'Interest_Rate': 
[2.75,2.5,2.5,2.5,2.5,2.5,2.5,2.25,2.25,2.25,2,2,2,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75], 
 'Unemployment_Rate': 
[5.3,5.3,5.3,5.3,5.4,5.6,5.5,5.5,5.5,5.6,5.7,5.9,6,5.9,5.8,6.1,6.2,6.1,6.1,6.1,5.9,6.2,6.2,6.1], 
 'Stock_Index_Price': 
[1464,1394,1357,1293,1256,1254,1234,1195,1159,1167,1130,1075,1047,965,943,958,971
,949,884,866,876,822,704,719]}

df = pd.DataFrame (Stock_Market, columns=['Year','Month','Interest_Rate','Unemployment_Rate','Stock_Index_Price'])
plt.scatter (df['Interest_Rate'], df['Stock_Index_Price'], color= "green")
plt.title ('Stock_Index_Price VS Interest_Rate ', fontsize=12)
plt.xlabel ('Interest_Rate' , fontsize=10)
plt.ylabel ('Stock_Index_Price')

--------------------------------------------------------------------------------------------

//SLIP18-->

Q1. Write a R program to find the maximum and the minimum value of a given vector.
 [10 Marks] 

 > nums = c (10,45,9,37,80)
> print ("Original Vector")
[1] "Original Vector"
> print (nums)
[1] 10 45  9 37 80
> print (paste("Maximum Number", max(nums)))
[1] "Maximum Number 80"
> print (paste("Minimum Number", min(nums)))
[1] "Minimum Number 9"


Q2. Consider the following observations/data. And apply simple linear regression and find out 
estimated coefficients b1 and b1 Also analyse the performance of the model 
(Use sklearn package) 
x = np.array([1,2,3,4,5,6,7,8]) 
y = np.array([7,14,15,18,19,21,26,23]) [20 Marks]

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
x=np.array([0,1,2,3,4,5,6,7,8,9,11,13])
y=np.array([1,3,2,5,7,8,8,9,10,12,16,18])
slop, intercept, r, p, std_error = stats.linregress(x,y)
def func(x):
  return slop * x + intercept

model = list(map(func,x))
plt.scatter(x,y)
plt.plot(x,model)
plt.show()
--------------------------------------------------------------------------------------------

//SLIP19-->

 
Q1. Write a R program to create a Dataframes which contain details of 5 Students and display the 
details. 
Students contain (Rollno,Studname,Address,Marks) [10 Marks] 

> Student = data.frame (RollNo= c (1,2,3,4,5),Name = c("Hadiya","Om","Ayesha","Mayur","Esha"), Address = c("Latur","Dighi","Jalgaon","Akurdi","Pune"),Marks = c (82,91,75,64,95))  
> print (Student)
  RollNo   Name Address Marks
1      1 Hadiya   Latur    82
2      2     Om   Dighi    91
3      3 Ayesha Jalgaon    75
4      4  Mayur  Akurdi    64
5      5   Esha    Pune    95

 
Q2. Write a python program to implement multiple Linear Regression model for a car dataset. 
Dataset can be downloaded from: 
https://www.w3schools.com/python/python_ml_multiple_regression.asp 
[20 Marks]


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn import linear_model

df = pd.read_csv ('Cars.csv')
X = df[['Weight', 'Volume']]
y = df['CO2']

regr = linear_model.LinearRegression()
regr.fit(X.values,y)
predictedCO2 = regr.predict([[2300,1300]])
print (predictedCO2)
--------------------------------------------------------------------------------------------

//SLIP20-->

Q1. Write a R program to create a data frame from four given vectors. 
[10 Marks] 

> Employees = data.frame (EmpName = c ("Kajal", "Manish", "Vivek", "Sayali", "Gargi"),
+ Empno = c (1,2,3,4,5),
+ Gender = c ("Female", "Male", "Male", "Female", "Female"),
+ Age = c (23, 42, 21, 31, 28), 
+ Designation = c ("Team Leader","Manager","Clerk","CEO","Clerk"))
> print (Employees)
  EmpName Empno Gender Age Designation
1   Kajal     1 Female  23 Team Leader
2  Manish     2   Male  42     Manager
3   Vivek     3   Male  21       Clerk
4  Sayali     4 Female  31         CEO
5   Gargi     5 Female  28       Clerk


Q2. Write a python program to implement hierarchical Agglomerative clustering algorithm. 
(Download Customer.csv dataset from github.com). 
[20 Marks]

import pandas as pd
import matplotlib.pyplot as mtp
df = pd.read_csv ('MallCustomers.csv')
x = df.iloc [:, [3,4]].values

import scipy.cluster.hierarchy as shc
dendro = shc.dendrogram (shc.linkage (x,method='ward'))
mtp.title ("Dendrogram")
mtp.xlabel ("Customer")
mtp.ylabel ("Euclidean distance")
mtp.show()

from sklearn.cluster import AgglomerativeClustering
hc = AgglomerativeClustering (n_clusters=5, affinity='euclidean', linkage='ward')
y_pred = hc.fit_predict(x)
mtp.scatter (x[y_pred == 0,0], x[y_pred == 0,1], s=100, c="red", label="Cluster1")
mtp.scatter (x[y_pred == 1,0], x[y_pred == 1,1], s=100, c="blue", label="Cluster2")
mtp.scatter (x[y_pred == 2,0], x[y_pred == 2,1], s=100, c="yellow", label="Cluster3")
mtp.scatter (x[y_pred == 3,0], x[y_pred == 3,1], s=100, c="pink", label="Cluster4")
mtp.scatter (x[y_pred == 4,0], x[y_pred == 4,1], s=100, c="cyan", label="Cluster5")
mtp.title ("Customer Cluster")
mtp.xlabel ("Annual Income k($)")
mtp.ylabel ("Spending score (1-100)")
mtp.legend()
mtp.show()
--------------------------------------------------------------------------------------------

----------------------------------!!BEST OF LUCK!!------------------------------------------

--------------------------------------------------------------------------------------------

import numpy as np
import math
from sklearn.metrics import mean_squared_error , mean_absolute_error
actual = [2.5,5.1,3.2,8.5,3.5,1.5,9.2,5.5,8.3,2.7,7.7,5.9,4.5,3.3,1.1,8.9,2.5,1.9,6.1,7.4,2.7,4.8,3.8,6.9,7.8]
calculated = [21,47,27,75,30,20,88,60,81,25,85,62,41,42,17,95,30,24,67,69,30,54,35,76,86]

MAE = mean_absolute_error (actual, calculated)
print ("Mean Absolute Error: "+ str (MAE))

MSE = np.square (np.subtract(actual, calculated)).mean()
print ("Mean Squared Error: "+ str (MSE))

MSE = np.square (np.subtract(actual, calculated)).mean()
RMSE = math.sqrt(MSE)
print ("Root Mean Square Error: "+str (RMSE)) 




